import sys
import asyncio
import aionotify
import yaml
import os
import tempfile
import requests

from yaml_include import Constructor as YamlIncludeConstructor


def generateConfig():
    loader = yaml.SafeLoader
    yaml_include_constructor = YamlIncludeConstructor(base_dir="/share/prometheus/")
    yaml.add_constructor("!include", yaml_include_constructor, loader)

    with open("prometheus.template", "r") as f:
        data = yaml.load(f, Loader=loader)

    data["scrape_configs"] = (
        data.get(".scrape_configs_static", []) + data.get(".scrape_configs_included", [])
    )
    data.pop(".scrape_configs_static", None)
    data.pop(".scrape_configs_included", None)
    return yaml.dump(data, default_flow_style=False)


def testConfig(config):
    try:
        with tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp:
            tmp.write(config)
            tmp_name = tmp.name
        result = os.system(f"promtool check config {tmp_name} > /dev/null") == 0
        os.unlink(tmp_name)
        if not result:
            raise Exception("validation error")
        return result
    except Exception as e:
        print(f"Failed to validate: {str(e)}")
        raise


def writeConfig(config, file):
    try:
        with open(file, "w") as f:
            f.write(config)
        requests.post(url="http://localhost:9090/-/reload")
    except Exception as e:
        print(f"Exception: {str(e)}")


loop = asyncio.get_event_loop()
paths_to_watch = ["/share/prometheus/targets/"]

lock = asyncio.Lock()


async def compile():
    async with lock:
        try:
            config = generateConfig()
            testConfig(config)
            writeConfig(config, "/etc/prometheus/prometheus.yml")
            print("Compiled")
        except Exception as e:
            print(f"Compilation error: {str(e)}")


async def watcher():
    await compile()
    filewatch = aionotify.Watcher()
    for path in paths_to_watch:
        filewatch.watch(
            path,
            aionotify.Flags.MODIFY | aionotify.Flags.CREATE | aionotify.Flags.DELETE,
        )
        print(f"Watching: {path}")
    await filewatch.setup(loop)
    try:
        while True:
            event = await filewatch.get_event()
            print(f"Got event: {event}")
            await compile()
    finally:
        filewatch.close()


def main():
    try:
        loop.run_until_complete(watcher())
    except KeyboardInterrupt:
        print("Watcher stopped")
    finally:
        loop.close()


if __name__ == "__main__":
    main()
